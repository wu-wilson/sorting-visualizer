{"version":3,"sources":["Components/NavBar/DDMenu.tsx","Components/NavBar/Navbar.tsx","Algorithms/BubbleSort.tsx","Animations/BubbleAnimate.tsx","Algorithms/SelectionSort.tsx","Animations/SelectionAnimate.tsx","Algorithms/InsertionSort.tsx","Animations/InsertionAnimate.tsx","Algorithms/MergeSort.tsx","Animations/MergeAnimate.tsx","Algorithms/QuickSort.tsx","Animations/QuickAnimate.tsx","Components/Bars.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DDMenu","open","setOpen","width","items","selection","setItems","setSelection","setArr","className","style","onClick","map","item","selected","selectedItem","option","generateNewArray","i","length","itemSelected","id","Navbar","algoSelection","setAlgoSelection","arrSelection","setArrSelection","speedSelection","setSpeedSelection","useState","algoOpen","setAlgoOpen","algos","setAlgos","arrSizeOpen","setArrSizeOpen","arrSize","setArrSize","speedOpen","setSpeedOpen","speed","setSpeed","hbOpen","setHbOpen","transform","bubbleSort","arr","arrCopy","animation","j","height","push","idx1","idx2","swap","sorted","bubbleAnimate","setIsSorting","color","setTimeout","selectionSort","min","pos","selectionAnimate","insertionSort","insertionAnimate","sort","aux","lo","hi","mid","Math","floor","k","overwriteIdx","newHeight","merge","mergeSort","mergeAnimate","index","pivot","partition","quickSort","quickAnimate","getSpeed","speedStr","temp","Bars","algo","isSorting","window","alert","console","log","bar","idx","backgroundColor","newArr","parseInt","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9e4bc63.chunk.js","sourcesContent":["import { selectionItem } from \"./Navbar\";\r\nimport { bar, generateNewArray } from \"../../App\";\r\n\r\nconst DDMenu = ({\r\n  open,\r\n  setOpen,\r\n  width,\r\n  items,\r\n  setItems,\r\n  selection,\r\n  setSelection,\r\n  setArr,\r\n}: {\r\n  open: boolean;\r\n  setOpen: (value: boolean) => void;\r\n  width: number;\r\n  items: selectionItem[];\r\n  setItems: (items: selectionItem[]) => void;\r\n  selection: string;\r\n  setSelection: (selection: string) => void;\r\n  setArr: (bars: bar[]) => void;\r\n}) => {\r\n  // Return the proper arrow when a dropdown menu is closed/opened.\r\n  const getArrow = () => {\r\n    if (open) {\r\n      return \"ᐱ\";\r\n    } else {\r\n      return \"ᐯ\";\r\n    }\r\n  };\r\n\r\n  // Set \"open\" to the proper value when a menu is opened or closed.\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  // If an item is selected, close the menu and change its color in the menu.\r\n  const itemSelected = (selectedItem: selectionItem) => {\r\n    setOpen(false);\r\n    // If an array size is selected, change the array displayed to the proper size.\r\n    if (items[0].option === \"20\") {\r\n      setArr(generateNewArray(selectedItem.option));\r\n    }\r\n    setSelection(selectedItem.option);\r\n    for (let i = 0; i < items.length; i++) {\r\n      if (items[i].option === selectedItem.option) {\r\n        items[i].selected = true;\r\n      } else {\r\n        items[i].selected = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dd-container\">\r\n      <div className=\"dd-select-box\" style={{ width: `${width}px` }}>\r\n        {selection}\r\n        <button className=\"dd-button\" onClick={handleClick}>\r\n          {getArrow()}\r\n        </button>\r\n      </div>\r\n      <div className={`dd-menu ${open ? null : \"dd-menu-closed\"}`}>\r\n        {items.map((item) => (\r\n          <div\r\n            className={`dd-menu-option ${\r\n              item.selected ? \"dd-option-selected\" : null\r\n            }`}\r\n            key={item.id}\r\n            onClick={() => itemSelected(item)}\r\n          >\r\n            {item.option}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DDMenu;\r\n","import { useState } from \"react\";\r\nimport DDMenu from \"./DDMenu\";\r\nimport \"../../styles.css\";\r\nimport { bar } from \"../../App\";\r\n\r\nexport type selectionItem = {\r\n  id: number;\r\n  option: string;\r\n  selected: boolean;\r\n};\r\n\r\nconst Navbar = ({\r\n  algoSelection,\r\n  setAlgoSelection,\r\n  arrSelection,\r\n  setArrSelection,\r\n  speedSelection,\r\n  setSpeedSelection,\r\n  setArr,\r\n}: {\r\n  algoSelection: string;\r\n  setAlgoSelection: (selection: string) => void;\r\n  arrSelection: string;\r\n  setArrSelection: (selection: string) => void;\r\n  speedSelection: string;\r\n  setSpeedSelection: (selection: string) => void;\r\n  setArr: (bars: bar[]) => void;\r\n}) => {\r\n  // Store whther the algorithm dropdown menu is opened or closed.\r\n  const [algoOpen, setAlgoOpen] = useState<boolean>(false);\r\n  // Store the selected algorithm.\r\n  const [algos, setAlgos] = useState<selectionItem[]>([\r\n    { id: 0, option: \"MERGE SORT\", selected: false },\r\n    { id: 1, option: \"QUICK SORT\", selected: false },\r\n    { id: 2, option: \"INSERTION SORT\", selected: false },\r\n    { id: 3, option: \"SELECTION SORT\", selected: false },\r\n    { id: 4, option: \"BUBBLE SORT\", selected: false },\r\n  ]);\r\n\r\n  // Store whther the array size dropdown menu is opened or closed.\r\n  const [arrSizeOpen, setArrSizeOpen] = useState<boolean>(false);\r\n  // Store the selected array size.\r\n  const [arrSize, setArrSize] = useState<selectionItem[]>([\r\n    { id: 0, option: \"20\", selected: false },\r\n    { id: 1, option: \"40\", selected: false },\r\n    { id: 2, option: \"60\", selected: false },\r\n    { id: 3, option: \"80\", selected: false },\r\n    { id: 4, option: \"100\", selected: false },\r\n  ]);\r\n\r\n  // Store whether the speed dropdown menu is opened or closed.\r\n  const [speedOpen, setSpeedOpen] = useState<boolean>(false);\r\n  // Store the selected speed.\r\n  const [speed, setSpeed] = useState<selectionItem[]>([\r\n    { id: 0, option: \"0.25x\", selected: false },\r\n    { id: 1, option: \"0.5x\", selected: false },\r\n    { id: 2, option: \"1x\", selected: false },\r\n    { id: 3, option: \"2x\", selected: false },\r\n    { id: 4, option: \"4x\", selected: false },\r\n  ]);\r\n\r\n  // Store whether the hamburger menu is opened or closed.\r\n  const [hbOpen, setHbOpen] = useState<boolean>(false);\r\n  // Set \"hbopen\" to the proper value when the menu is closed/opened.\r\n  const handleHbClick = () => {\r\n    setHbOpen(!hbOpen);\r\n  };\r\n\r\n  // Return the proper hamburger menu icon.\r\n  const getHbIcon = () => {\r\n    if (hbOpen) {\r\n      return <div className=\"hb-x-container\">✕</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"hb-line-container\">\r\n          <div className=\"hb-line\" />\r\n          <div className=\"hb-line\" />\r\n          <div className=\"hb-line\" />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"nb-container\">\r\n      sorting visualizer\r\n      <div className=\"nb-menus-container\">\r\n        <DDMenu\r\n          open={algoOpen}\r\n          setOpen={setAlgoOpen}\r\n          width={150}\r\n          items={algos}\r\n          setItems={setAlgos}\r\n          selection={algoSelection}\r\n          setSelection={setAlgoSelection}\r\n          setArr={setArr}\r\n        />\r\n        <DDMenu\r\n          open={arrSizeOpen}\r\n          setOpen={setArrSizeOpen}\r\n          width={120}\r\n          items={arrSize}\r\n          setItems={setArrSize}\r\n          selection={arrSelection}\r\n          setSelection={setArrSelection}\r\n          setArr={setArr}\r\n        />\r\n        <DDMenu\r\n          open={speedOpen}\r\n          setOpen={setSpeedOpen}\r\n          width={80}\r\n          items={speed}\r\n          setItems={setSpeed}\r\n          selection={speedSelection}\r\n          setSelection={setSpeedSelection}\r\n          setArr={setArr}\r\n        />\r\n      </div>\r\n      <div className=\"hb-container\" onClick={handleHbClick}>\r\n        {getHbIcon()}\r\n      </div>\r\n      <div\r\n        className=\"hb-menu-container\"\r\n        style={{ transform: hbOpen ? \"translateX(210px)\" : \"translateX(0)\" }}\r\n      >\r\n        <div className=\"hb-menu\">\r\n          <DDMenu\r\n            open={algoOpen}\r\n            setOpen={setAlgoOpen}\r\n            width={150}\r\n            items={algos}\r\n            setItems={setAlgos}\r\n            selection={algoSelection}\r\n            setSelection={setAlgoSelection}\r\n            setArr={setArr}\r\n          />\r\n          <DDMenu\r\n            open={arrSizeOpen}\r\n            setOpen={setArrSizeOpen}\r\n            width={150}\r\n            items={arrSize}\r\n            setItems={setArrSize}\r\n            selection={arrSelection}\r\n            setSelection={setArrSelection}\r\n            setArr={setArr}\r\n          />\r\n          <DDMenu\r\n            open={speedOpen}\r\n            setOpen={setSpeedOpen}\r\n            width={150}\r\n            items={speed}\r\n            setItems={setSpeed}\r\n            selection={speedSelection}\r\n            setSelection={setSpeedSelection}\r\n            setArr={setArr}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { bar } from \"../App\";\r\n\r\nexport type bubbleAnimation = {\r\n  // Store idx1 and idx2, the indexes we are comparing.\r\n  idx1: number;\r\n  idx2: number;\r\n  // Store swap and sorted, which tells us whether values were swapped and if a bar is sorted.\r\n  swap: boolean;\r\n  sorted: boolean;\r\n};\r\n\r\nconst bubbleSort = (arr: bar[]) => {\r\n  const arrCopy: bar[] = [...arr];\r\n  const animation: bubbleAnimation[] = [];\r\n  for (let i = 0; i < arrCopy.length; i++) {\r\n    for (let j = 0; j < arrCopy.length - i - 1; j++) {\r\n      if (arrCopy[j].height > arrCopy[j + 1].height) {\r\n        animation.push({ idx1: j, idx2: j + 1, swap: true, sorted: false });\r\n        [arrCopy[j], arrCopy[j + 1]] = [arrCopy[j + 1], arrCopy[j]];\r\n      } else {\r\n        animation.push({ idx1: j, idx2: j + 1, swap: false, sorted: false });\r\n      }\r\n      if (animation[animation.length - 1].idx1 === arrCopy.length - i - 2) {\r\n        animation[animation.length - 1].sorted = true;\r\n      }\r\n    }\r\n  }\r\n  return animation;\r\n};\r\n\r\nexport default bubbleSort;\r\n","import { bar } from \"../App\";\r\nimport bubbleSort, { bubbleAnimation } from \"../Algorithms/BubbleSort\";\r\n\r\nconst bubbleAnimate = (\r\n  arr: bar[],\r\n  setArr: (arr: bar[]) => void,\r\n  setIsSorting: (value: boolean) => void,\r\n  speed: number\r\n) => {\r\n  // Get the animations for sorting the array via bubble sort.\r\n  const animation: bubbleAnimation[] = bubbleSort(arr);\r\n  // Set the array to its initial color.\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i].color = \"#d1d1d1\";\r\n  }\r\n  setArr([...arr]);\r\n  // Iterate through the animation array, animating the algorithm.\r\n  for (let i = 0; i < animation.length; i++) {\r\n    // Uncolor the appropriate bars from the previous iteration.\r\n    setTimeout(() => {\r\n      if (i !== 0) {\r\n        if (animation[i - 1].sorted === true) {\r\n          arr[animation[i - 1].idx1].color = \"#d1d1d1\";\r\n          setArr([...arr]);\r\n        } else {\r\n          arr[animation[i - 1].idx1].color = \"#d1d1d1\";\r\n          arr[animation[i - 1].idx2].color = \"#d1d1d1\";\r\n          setArr([...arr]);\r\n        }\r\n      }\r\n    }, i * 20 * speed);\r\n    // Color the appropriate bars for this iteration.\r\n    setTimeout(() => {\r\n      arr[animation[i].idx1].color = \"#d1d366\";\r\n      arr[animation[i].idx2].color = \"#d1d366\";\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // Swap values/execute the animation for this iteration.\r\n    setTimeout(() => {\r\n      if (animation[i].swap === true) {\r\n        [arr[animation[i].idx1], arr[animation[i].idx2]] = [\r\n          arr[animation[i].idx2],\r\n          arr[animation[i].idx1],\r\n        ];\r\n        setArr([...arr]);\r\n      }\r\n      if (animation[i].sorted === true) {\r\n        arr[animation[i].idx2].color = \"rgb(176, 201, 169)\";\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // If the animation is finished, set isSorting to false and color arr[0] green.\r\n    if (i === animation.length - 1) {\r\n      setTimeout(() => {\r\n        arr[0].color = \"rgb(176, 201, 169)\";\r\n        setArr([...arr]);\r\n        setIsSorting(false);\r\n      }, i * 20 * speed);\r\n    }\r\n  }\r\n};\r\n\r\nexport default bubbleAnimate;\r\n","import { bar } from \"../App\";\r\n\r\nexport type selectionAnimation = {\r\n  // Store pos, the index which min will be swapped with.\r\n  pos: number;\r\n  // Store min and idx2, the min index and index being compared to min.\r\n  min: number;\r\n  idx2: number;\r\n  // Store swap, which tells us whether values were swapped.\r\n  swap: boolean;\r\n};\r\n\r\nconst selectionSort = (arr: bar[]) => {\r\n  const arrCopy: bar[] = [...arr];\r\n  const animation: selectionAnimation[] = [];\r\n  for (let i = 0; i < arrCopy.length; i++) {\r\n    let min = i;\r\n    for (let j = i; j < arrCopy.length; j++) {\r\n      if (arrCopy[j].height < arrCopy[min].height) {\r\n        animation.push({ pos: i, min: min, idx2: j, swap: false });\r\n        min = j;\r\n      } else {\r\n        animation.push({ pos: i, min: min, idx2: j, swap: false });\r\n      }\r\n    }\r\n    animation.push({ pos: i, min: min, idx2: min, swap: true });\r\n    [arrCopy[i], arrCopy[min]] = [arrCopy[min], arrCopy[i]];\r\n  }\r\n  return animation;\r\n};\r\n\r\nexport default selectionSort;\r\n","import { bar } from \"../App\";\r\nimport selectionSort, { selectionAnimation } from \"../Algorithms/SelectionSort\";\r\n\r\nconst selectionAnimate = (\r\n  arr: bar[],\r\n  setArr: (arr: bar[]) => void,\r\n  setIsSorting: (value: boolean) => void,\r\n  speed: number\r\n) => {\r\n  // Get the animations for sorting the array via selection sort.\r\n  const animation: selectionAnimation[] = selectionSort(arr);\r\n  // Set the array to its initial color.\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i].color = \"#d1d1d1\";\r\n  }\r\n  setArr([...arr]);\r\n  // Iterate through the animation array, animating the algorithm.\r\n  for (let i = 0; i < animation.length; i++) {\r\n    // Uncolor the appropriate bars from the previous iteration.\r\n    setTimeout(() => {\r\n      if (i !== 0 && animation[i - 1].swap === false) {\r\n        arr[animation[i - 1].min].color = \"#d1d1d1\";\r\n        arr[animation[i - 1].idx2].color = \"#d1d1d1\";\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // Color the appropriate bars for this iteration.\r\n    setTimeout(() => {\r\n      arr[animation[i].idx2].color = \"#d1d366\";\r\n      arr[animation[i].min].color = \"#8caad1\";\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // Swap values/execute the animation for this iteration.\r\n    setTimeout(() => {\r\n      if (animation[i].swap === true) {\r\n        [arr[animation[i].pos], arr[animation[i].min]] = [\r\n          arr[animation[i].min],\r\n          arr[animation[i].pos],\r\n        ];\r\n        arr[animation[i].pos].color = \"rgb(176, 201, 169)\";\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // If the animation is finished, set isSorting to false.\r\n    if (i === animation.length - 1) {\r\n      setTimeout(() => {\r\n        setIsSorting(false);\r\n      }, i * 20 * speed);\r\n    }\r\n  }\r\n};\r\n\r\nexport default selectionAnimate;\r\n","import { bar } from \"../App\";\r\n\r\nexport type insertionAnimation = {\r\n  // Store idx1 and idx2, the indexes we are comparing.\r\n  idx1: number;\r\n  idx2: number;\r\n};\r\n\r\nconst insertionSort = (arr: bar[]) => {\r\n  const arrCopy: bar[] = [...arr];\r\n  const animation: insertionAnimation[] = [];\r\n  for (let i = 1; i < arrCopy.length; i++) {\r\n    for (let j = i; j > 0; j--) {\r\n      if (arrCopy[j].height < arrCopy[j - 1].height) {\r\n        animation.push({ idx1: j, idx2: j - 1 });\r\n        [arrCopy[j], arrCopy[j - 1]] = [arrCopy[j - 1], arrCopy[j]];\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return animation;\r\n};\r\n\r\nexport default insertionSort;\r\n","import { bar } from \"../App\";\r\nimport insertionSort, { insertionAnimation } from \"../Algorithms/InsertionSort\";\r\n\r\nconst insertionAnimate = (\r\n  arr: bar[],\r\n  setArr: (arr: bar[]) => void,\r\n  setIsSorting: (value: boolean) => void,\r\n  speed: number\r\n) => {\r\n  // Get the animations for sorting the array via insertion sort.\r\n  const animation: insertionAnimation[] = insertionSort(arr);\r\n  // Set the array to its initial color.\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i].color = \"#d1d1d1\";\r\n  }\r\n  setArr([...arr]);\r\n  // Iterate through the animation array, animating the algorithm.\r\n  for (let i = 0; i < animation.length; i++) {\r\n    // Uncolor the appropriate bars from the previous iteration.\r\n    setTimeout(() => {\r\n      if (i !== 0) {\r\n        arr[animation[i - 1].idx1].color = \"#d1d1d1\";\r\n        arr[animation[i - 1].idx2].color = \"#d1d1d1\";\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // Color the appropriate bars for this iteration.\r\n    setTimeout(() => {\r\n      arr[animation[i].idx1].color = \"#d1d366\";\r\n      arr[animation[i].idx2].color = \"#d1d366\";\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // Swap values/execute the animation for this iteration.\r\n    setTimeout(() => {\r\n      [arr[animation[i].idx1], arr[animation[i].idx2]] = [\r\n        arr[animation[i].idx2],\r\n        arr[animation[i].idx1],\r\n      ];\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // If the animation is finished, set isSorting to false and color the array green.\r\n    if (i === animation.length - 1) {\r\n      setTimeout(() => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n          arr[i].color = \"rgb(176, 201, 169)\";\r\n        }\r\n        setIsSorting(false);\r\n        setArr([...arr]);\r\n      }, i * 20 * speed);\r\n    }\r\n  }\r\n};\r\n\r\nexport default insertionAnimate;\r\n","import { bar } from \"../App\";\r\n\r\nexport type mergeAnimation = {\r\n  // Store overwriteIdx, the index being overwritten.\r\n  overwriteIdx: number;\r\n  // Store newHeight, the new height of the overwritten index.\r\n  newHeight: number;\r\n  // Store idx1 and idx2, the indexes we are comparing.\r\n  idx1: number;\r\n  idx2: number;\r\n};\r\n\r\nconst merge = (\r\n  arr: bar[],\r\n  aux: bar[],\r\n  lo: number,\r\n  mid: number,\r\n  hi: number,\r\n  animation: mergeAnimation[]\r\n) => {\r\n  aux = [...arr];\r\n  let i = lo;\r\n  let j = mid + 1;\r\n  for (let k = lo; k < hi + 1; k++) {\r\n    if (i > mid) {\r\n      animation.push({\r\n        overwriteIdx: k,\r\n        newHeight: aux[j].height,\r\n        idx1: i - 1,\r\n        idx2: j,\r\n      });\r\n      arr[k] = aux[j];\r\n      j += 1;\r\n    } else if (j > hi) {\r\n      animation.push({\r\n        overwriteIdx: k,\r\n        newHeight: aux[i].height,\r\n        idx1: j - 1,\r\n        idx2: i,\r\n      });\r\n      arr[k] = aux[i];\r\n      i += 1;\r\n    } else if (aux[j].height < aux[i].height) {\r\n      animation.push({\r\n        overwriteIdx: k,\r\n        newHeight: aux[j].height,\r\n        idx1: i,\r\n        idx2: j,\r\n      });\r\n      arr[k] = aux[j];\r\n      j += 1;\r\n    } else {\r\n      animation.push({\r\n        overwriteIdx: k,\r\n        newHeight: aux[i].height,\r\n        idx1: i,\r\n        idx2: j,\r\n      });\r\n      arr[k] = aux[i];\r\n      i += 1;\r\n    }\r\n  }\r\n};\r\n\r\nconst sort = (\r\n  arr: bar[],\r\n  aux: bar[],\r\n  lo: number,\r\n  hi: number,\r\n  animation: mergeAnimation[]\r\n) => {\r\n  if (hi <= lo) {\r\n    return;\r\n  }\r\n  const mid = lo + Math.floor((hi - lo) / 2);\r\n  sort(arr, aux, lo, mid, animation);\r\n  sort(arr, aux, mid + 1, hi, animation);\r\n  merge(arr, aux, lo, mid, hi, animation);\r\n};\r\n\r\nconst mergeSort = (arr: bar[]) => {\r\n  const arrCopy: bar[] = [...arr];\r\n  const aux: bar[] = [...arr];\r\n  const animation: mergeAnimation[] = [];\r\n  sort(arrCopy, aux, 0, arrCopy.length - 1, animation);\r\n  return animation;\r\n};\r\n\r\nexport default mergeSort;\r\n","import { bar } from \"../App\";\r\nimport mergeSort, { mergeAnimation } from \"../Algorithms/MergeSort\";\r\n\r\nconst mergeAnimate = (\r\n  arr: bar[],\r\n  setArr: (arr: bar[]) => void,\r\n  setIsSorting: (value: boolean) => void,\r\n  speed: number\r\n) => {\r\n  // Get the animations for sorting the array via merge sort.\r\n  const animation: mergeAnimation[] = mergeSort(arr);\r\n  // Set the array to its initial color.\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i].color = \"#d1d1d1\";\r\n  }\r\n  setArr([...arr]);\r\n  // Iterate through the animation array, animating the algorithm.\r\n  for (let i = 0; i < animation.length; i++) {\r\n    // Uncolor the appropriate bars from the previous iteration.\r\n    setTimeout(() => {\r\n      if (i !== 0) {\r\n        arr[animation[i - 1].idx1].color = \"#d1d1d1\";\r\n        arr[animation[i - 1].idx2].color = \"#d1d1d1\";\r\n        arr[animation[i - 1].overwriteIdx].color = \"#d1d1d1\";\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // Color the appropriate bars for this iteration.\r\n    setTimeout(() => {\r\n      arr[animation[i].idx1].color = \"#d1d366\";\r\n      arr[animation[i].idx2].color = \"#d1d366\";\r\n      arr[animation[i].overwriteIdx].color = \"#8caad1\";\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // Overwrite values/execute the animation for this iteration.\r\n    setTimeout(() => {\r\n      arr[animation[i].overwriteIdx].height = animation[i].newHeight;\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // If the animation is finished, set isSorting to false and color the array green.\r\n    if (i === animation.length - 1) {\r\n      setTimeout(() => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n          arr[i].color = \"rgb(176, 201, 169)\";\r\n        }\r\n        setIsSorting(false);\r\n        setArr([...arr]);\r\n      }, i * 20 * speed);\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeAnimate;\r\n","import { bar } from \"../App\";\r\n\r\nexport type quickAnimation = {\r\n  // Store pivot, idx1, and idx2, the indexes of the pivot and values being compared.\r\n  pivot: number;\r\n  idx1: number;\r\n  idx2: number;\r\n  // Store swap and sorted, which tells us whether values were swapped and if a bar is sorted.\r\n  swap: boolean;\r\n  sorted: boolean;\r\n};\r\n\r\nconst partition = (\r\n  arr: bar[],\r\n  lo: number,\r\n  hi: number,\r\n  animation: quickAnimation[]\r\n) => {\r\n  let i = hi;\r\n  let j = i;\r\n  let pivot = arr[lo].height;\r\n  while (i > lo) {\r\n    animation.push({\r\n      pivot: lo,\r\n      idx1: i,\r\n      idx2: j,\r\n      swap: false,\r\n      sorted: false,\r\n    });\r\n    if (pivot < arr[i].height) {\r\n      animation.push({\r\n        pivot: lo,\r\n        idx1: i,\r\n        idx2: j,\r\n        swap: true,\r\n        sorted: false,\r\n      });\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n      j--;\r\n    }\r\n    i--;\r\n  }\r\n  animation.push({\r\n    pivot: lo,\r\n    idx1: i,\r\n    idx2: j,\r\n    swap: true,\r\n    sorted: true,\r\n  });\r\n  [arr[j], arr[lo]] = [arr[lo], arr[j]];\r\n  return j;\r\n};\r\n\r\nconst sort = (\r\n  arr: bar[],\r\n  lo: number,\r\n  hi: number,\r\n  animation: quickAnimation[]\r\n) => {\r\n  if (lo < hi) {\r\n    const index = partition(arr, lo, hi, animation);\r\n    sort(arr, lo, index - 1, animation);\r\n    sort(arr, index + 1, hi, animation);\r\n  } else {\r\n    if (lo === hi) {\r\n      animation.push({\r\n        pivot: lo,\r\n        idx1: lo,\r\n        idx2: lo,\r\n        swap: true,\r\n        sorted: true,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst quickSort = (arr: bar[]) => {\r\n  const arrCopy: bar[] = [...arr];\r\n  const animation: quickAnimation[] = [];\r\n  sort(arrCopy, 0, arrCopy.length - 1, animation);\r\n  return animation;\r\n};\r\n\r\nexport default quickSort;\r\n","import { bar } from \"../App\";\r\nimport quickSort, { quickAnimation } from \"../Algorithms/QuickSort\";\r\n\r\nconst quickAnimate = (\r\n  arr: bar[],\r\n  setArr: (arr: bar[]) => void,\r\n  setIsSorting: (value: boolean) => void,\r\n  speed: number\r\n) => {\r\n  // Get the animations for sorting the array via quick sort.\r\n  const animation: quickAnimation[] = quickSort(arr);\r\n  // Set the array to its initial color.\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i].color = \"#d1d1d1\";\r\n  }\r\n  setArr([...arr]);\r\n  // Iterate through the animation array, animating the algorithm.\r\n  for (let i = 0; i < animation.length; i++) {\r\n    // Uncolor the appropriate bars from the previous iteration.\r\n    setTimeout(() => {\r\n      if (i !== 0) {\r\n        if (animation[i - 1].swap === true) {\r\n          if (animation[i - 1].sorted === false) {\r\n            arr[animation[i - 1].idx1].color = \"#d1d1d1\";\r\n            arr[animation[i - 1].idx2].color = \"#d1d1d1\";\r\n          }\r\n        } else {\r\n          arr[animation[i - 1].idx1].color = \"#d1d1d1\";\r\n          arr[animation[i - 1].idx2].color = \"#d1d1d1\";\r\n        }\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // Color the appropriate bars for this iteration.\r\n    setTimeout(() => {\r\n      arr[animation[i].idx1].color = \"#d1d366\";\r\n      arr[animation[i].idx2].color = \"#d1d366\";\r\n      arr[animation[i].pivot].color = \"#8caad1\";\r\n      setArr([...arr]);\r\n    }, i * 20 * speed);\r\n    // Swap values/execute the animation for this iteration.\r\n    setTimeout(() => {\r\n      if (animation[i].swap === true) {\r\n        [arr[animation[i].idx1], arr[animation[i].idx2]] = [\r\n          arr[animation[i].idx2],\r\n          arr[animation[i].idx1],\r\n        ];\r\n        if (animation[i].sorted === true) {\r\n          arr[animation[i].idx1].color = \"#d1d1d1\";\r\n          arr[animation[i].idx2].color = \"rgb(176, 201, 169)\";\r\n        }\r\n        setArr([...arr]);\r\n      }\r\n    }, i * 20 * speed);\r\n    // If the animation is finished, set isSorting to false.\r\n    if (i === animation.length - 1) {\r\n      setTimeout(() => {\r\n        setIsSorting(false);\r\n      }, i * 20 * speed);\r\n    }\r\n  }\r\n};\r\n\r\nexport default quickAnimate;\r\n","import bubbleAnimate from \"../Animations/BubbleAnimate\";\r\nimport selectionAnimate from \"../Animations/SelectionAnimate\";\r\nimport insertionAnimate from \"../Animations/InsertionAnimate\";\r\nimport mergeAnimate from \"../Animations/MergeAnimate\";\r\nimport quickAnimate from \"../Animations/QuickAnimate\";\r\nimport { bar, generateNewArray } from \"../App\";\r\nimport { useState } from \"react\";\r\n\r\n// Given the speed selected by the user, return the proper multiplier.\r\nconst getSpeed = (speedStr: string) => {\r\n  if (speedStr !== \"ARRAY SIZE\") {\r\n    let temp: string = \"\";\r\n    for (let i = 0; i < speedStr.length - 1; i++) {\r\n      temp += speedStr[i];\r\n    }\r\n    if (temp === \"4\") {\r\n      return 0.25;\r\n    } else if (temp === \"2\") {\r\n      return 0.5;\r\n    } else if (temp === \"1\") {\r\n      return 1;\r\n    } else if (temp === \"0.5\") {\r\n      return 2;\r\n    } else {\r\n      return 4;\r\n    }\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconst Bars = ({\r\n  algo,\r\n  arrSize,\r\n  speed,\r\n  arr,\r\n  setArr,\r\n}: {\r\n  algo: string;\r\n  arrSize: string;\r\n  speed: string;\r\n  arr: bar[];\r\n  setArr: (arr: bar[]) => void;\r\n}) => {\r\n  // Store whether or not the array is currently being sorted.\r\n  const [isSorting, setIsSorting] = useState<boolean>(false);\r\n\r\n  // If the array is not being sorted, display a new array.\r\n  const handleNewArray = () => {\r\n    if (isSorting === false) {\r\n      setArr(generateNewArray(arrSize));\r\n    }\r\n  };\r\n\r\n  // If the array is not currently being sorted, sort it.\r\n  const handleSort = () => {\r\n    if (isSorting === false) {\r\n      // If an algorithm, array size, or speed is not set, alert the user.\r\n      if (\r\n        algo === \"ALGORITHM\" ||\r\n        arrSize === \"ARRAY SIZE\" ||\r\n        speed === \"SPEED\"\r\n      ) {\r\n        window.alert(\"Please select an algorithm, array size, and speed.\");\r\n      } else {\r\n        // Sort the array with the proper algorithm and speed.\r\n        setIsSorting(true);\r\n        switch (algo) {\r\n          case \"BUBBLE SORT\":\r\n            bubbleAnimate(arr, setArr, setIsSorting, getSpeed(speed));\r\n            break;\r\n          case \"SELECTION SORT\":\r\n            selectionAnimate(arr, setArr, setIsSorting, getSpeed(speed));\r\n            break;\r\n          case \"INSERTION SORT\":\r\n            insertionAnimate(arr, setArr, setIsSorting, getSpeed(speed));\r\n            break;\r\n          case \"MERGE SORT\":\r\n            mergeAnimate(arr, setArr, setIsSorting, getSpeed(speed));\r\n            break;\r\n          case \"QUICK SORT\":\r\n            quickAnimate(arr, setArr, setIsSorting, getSpeed(speed));\r\n            break;\r\n          default:\r\n            console.log(\"error\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bars-container\">\r\n      <div className=\"bars-box-container\">\r\n        <div className=\"bars-button-container\">\r\n          <button className=\"bars-button new-arr\" onClick={handleNewArray}>\r\n            NEW ARRAY\r\n          </button>\r\n          <button className=\"bars-button\" onClick={handleSort}>\r\n            SORT ARRAY\r\n          </button>\r\n        </div>\r\n        <div className=\"bars-bars-container\">\r\n          {arr.map((bar, idx) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={idx}\r\n              style={{\r\n                height: `${bar.height}px`,\r\n                backgroundColor: bar.color,\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n","import { useState } from \"react\";\nimport Navbar from \"./Components/NavBar/Navbar\";\nimport Bars from \"./Components/Bars\";\n\n// Each bar will have a height and a color.\nexport type bar = {\n  height: number;\n  color: string;\n};\n\n// Generate a new array.\nexport const generateNewArray = (arrSelection: string) => {\n  const newArr: bar[] = [];\n  if (arrSelection !== \"ARRAY SIZE\") {\n    for (let i = 0; i < parseInt(arrSelection); i++) {\n      newArr.push({\n        height: Math.floor(Math.random() * (430 - 10)) + 10,\n        color: \"#d1d1d1\",\n      });\n    }\n  } else {\n    for (let i = 0; i < 40; i++) {\n      newArr.push({\n        height: Math.floor(Math.random() * (430 - 10)) + 10,\n        color: \"#d1d1d1\",\n      });\n    }\n  }\n  return newArr;\n};\n\nconst App = () => {\n  // Store selected algorithm, array size, and speed.\n  const [algoSelection, setAlgoSelection] = useState<string>(\"ALGORITHM\");\n  const [arrSelection, setArrSelection] = useState<string>(\"ARRAY SIZE\");\n  const [speedSelection, setSpeedSelection] = useState<string>(\"SPEED\");\n  // Store the main array which will be sorted.\n  const [arr, setArr] = useState<bar[]>(generateNewArray(arrSelection));\n\n  return (\n    <div className=\"app-container\">\n      <Navbar\n        algoSelection={algoSelection}\n        setAlgoSelection={setAlgoSelection}\n        arrSelection={arrSelection}\n        setArrSelection={setArrSelection}\n        speedSelection={speedSelection}\n        setSpeedSelection={setSpeedSelection}\n        setArr={setArr}\n      />\n      <Bars\n        algo={algoSelection}\n        arrSize={arrSelection}\n        speed={speedSelection}\n        arr={arr}\n        setArr={setArr}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}